/*

-- 买卖股票的最佳时机 --

给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
*/

/**
 * 解题思路：
 * 题目要求 “不能同时参与多笔交易，在购买之前出售掉之前的股票”
 * 刚开始被低卖高卖这样的逻辑套住了，其实没有那么复杂，
 * 因为不能同时购买，所以就要尽可能的多交易，才能保证最大的利益
 * 举个栗子看这组数据[1,2,3,4,5]
 * 当我第一天买的时候价格为1，如果我第二天卖掉收益为1，接着在第二天买入第三天卖掉，以此类推
 * 当我最后一天卖掉的时候收益也是4，和上文例子中第一天买第五天卖是一样的
 * 我们用这个思路来写我们操作股票的代码，如下
 */

var maxProfit = function(prices) {
  if (!prices.length) { return 0 }

  let profit = 0

  for (var i = 1; i < prices.length; i++) {
    let diff = prices[i] - prices[i - 1]
    if (diff > 0) {
      profit += diff
    }
  }
  return profit
};

// -------- test ------------

prices = [1,2]

var receive = maxProfit(prices)

console.log(receive)
